@page "/persons"
@using System.Net.Http.Headers
@using Gender = Common.Gender
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<h3 class="text-2xl font-bold mb-4 text-gray-100">Persons</h3>

<div class="flex justify-end mb-4">
    <button class="btn btn-primary" @onclick="ToggleAddForm">Add New Person</button>
</div>

@if (_isAdding)
{
    <div class="overlay fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center">
        <div class="form-container bg-gray-800 p-6 rounded-lg shadow-lg max-w-3xl w-full mx-auto text-gray-100">
            <h4 class="text-xl font-semibold mb-4">Add New Person</h4>
            <EditForm Model="_newPerson" OnValidSubmit="AddPerson">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-red-500"/>

                <div class="form-group mb-4">
                    <label class="block font-medium mb-2">Full Name:</label>
                    <InputText @bind-Value="_newPerson.FullName" class="form-control w-full bg-gray-700 text-gray-100"/>
                </div>

                <div class="form-group mb-4">
                    <label class="block font-medium mb-2">Gender:</label>
                    <InputSelect @bind-Value="_newPerson.Gender" class="form-control w-full bg-gray-700 text-gray-100">
                        @foreach (var value in Enum.GetValues<Gender>())
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group mb-4">
                    <label class="block font-medium mb-2">Passport Series:</label>
                    <InputText @bind-Value="_newPerson.PassportSeria"
                               class="form-control w-full bg-gray-700 text-gray-100 uppercase"
                               maxlength="2"
                               placeholder="XX"
                               @oninput="(e) => _newPerson.PassportSeria = e.Value.ToString().ToUpper()"/>
                </div>

                <div class="form-group">
                    <label for="passportNumber">Passport Number:</label>
                    <InputText @bind-Value="_newPerson.PassportNumber"
                               id="passportNumber"
                               type="text"
                               class="form-control"
                               inputmode="numeric"
                               pattern="[0-9]{7}"
                               autocomplete="off"
                               maxlength="7"
                               onkeypress="return event.charCode >= 48 && event.charCode <= 57"
                               placeholder="1234567"/>
                </div>

                <div class="form-group mb-4">
                    <label class="block font-medium mb-2">Address:</label>
                    <InputText @bind-Value="_newPerson.Address" class="form-control w-full bg-gray-700 text-gray-100"/>
                </div>

                <div class="form-group mb-4">
                    <label class="block font-medium mb-2">Phone Number:</label>
                    <InputText @bind-Value="_newPerson.PhoneNumber"
                               class="form-control w-full bg-gray-700 text-gray-100"
                               maxlength="18"
                               placeholder="+998(##)-###-##-##"
                               @oninput="HandleInputChange"/>
                </div>

                <div class="form-group mb-4">
                    <label class="block font-medium mb-2">Upload Photo:</label>
                    <InputFile OnChange="HandlePhotoUpload" class="text-gray-100"/>
                </div>

                <div class="flex justify-end space-x-2">
                    <button type="submit" class="btn btn-success">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleAddForm">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_persons != null)
{
    <div class="overflow-x-auto ">
        <PaginationComponent TItem="PersonDto" Items="_persons" DefaultPageSize="5">
            <ChildContentHeader>
                <tr class="bg-gray-900">
                    <th class="border border-gray-700 px-4 py-2">ID</th>
                    <th class="border border-gray-700 px-4 py-2">Full Name</th>
                    <th class="border border-gray-700 px-4 py-2">Phone Number</th>
                    <th class="border border-gray-700 px-5 py-2">Actions</th>
                </tr>
            </ChildContentHeader>
            <ChildContentRow Context="person">
                <tr class="hover:bg-gray-700 text-white">
                    <td class="border border-gray-700 px-4 py-2">@person.Id</td>
                    <td class="border border-gray-700 px-4 py-2">@person.FullName</td>
                    <td class="border border-gray-700 px-4 py-2">@person.PhoneNumber</td>
                    <td class="border border-gray-700 px-5 py-2">
                        <button class="btn btn-outline-success material-icons">
                            <a href="@($"/personinfo/{person.Id}")" class="text-inherit">visibility</a>
                        </button>
                        <button class="btn btn-outline-danger material-icons" @onclick="() => DeletePerson(person.Id)">
                            delete
                        </button>
                    </td>
                </tr>
            </ChildContentRow>
        </PaginationComponent>
    </div>
}
else
{
    <p class="text-center mt-4 text-gray-100">Loading...</p>
}

<style>
    /* General Reset and Base Styles */
    body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        background-color: #1c1c1e;
        color: #f5f5f7;
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }

    h3, h4 {
        color: #f5f5f7;
    }

    /* Button Styles */
    .btn {
        padding: 10px 16px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
    }

    .btn-primary {
        background-color: #0a84ff;
        color: #fff;
        border: none;
    }

    .btn-primary:hover {
        background-color: #0066cc;
    }

    .btn-secondary {
        background-color: #3a3a3c;
        color: #f5f5f7;
        border: none;
    }

    .btn-secondary:hover {
        background-color: #4a4a4c;
    }

    .btn-outline-success {
        border: 1px solid #30d158;
        color: #30d158;
        background-color: transparent;
    }

    .btn-outline-success:hover {
        background-color: #30d158;
        color: #fff;
    }

    .btn-outline-danger {
        border: 1px solid #ff453a;
        color: #ff453a;
        background-color: transparent;
    }

    .btn-outline-danger:hover {
        background-color: #ff453a;
        color: #fff;
    }

    /* Form Fields */
    .form-control {
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid #3a3a3c;
        background-color: #2c2c2e;
        color: #f5f5f7;
        font-size: 14px;
    }

    .form-control:focus {
        outline: none;
        border-color: #0a84ff;
        box-shadow: 0 0 0 2px rgba(10, 132, 255, 0.3);
    }

    /* Table Styles */
    .table-auto {
        width: 100%;
        border-collapse: collapse;
    }

    .table-auto th,
    .table-auto td {
        padding: 12px;
        text-align: left;
        border: 1px solid #3a3a3c;
    }

    .table-auto th {
        background-color: #2c2c2e;
        font-weight: bold;
        color: #f5f5f7;
    }

    .table-auto tr:hover {
        background-color: #3a3a3c;
    }

    /* Overlay Styles */
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.75);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .form-container {
        max-width: 600px;
        background-color: #1c1c1e;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }

    .form-container h4 {
        color: #f5f5f7;
        margin-bottom: 16px;
    }

    /* Material Icons */
    .material-icons {
        font-size: 18px;
        line-height: 1;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin: 0 4px;
    }

    .text-inherit {
        color: inherit;
        text-decoration: none;
    }
</style>

@code {
    private List<PersonDto>? _persons;
    private PersonDto _newPerson = new();
    private bool _isAdding = false;
    private IBrowserFile? _uploadedPhoto;

    protected override async Task OnInitializedAsync()
    {
        await LoadPersons();
    }

    private async Task LoadPersons()
    {
        _persons = await Http.GetFromJsonAsync<List<PersonDto>>("/Persons");
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (!string.IsNullOrEmpty(value))
        {
            // Оставляем только цифры
            value = new string(value.Where(char.IsDigit).ToArray());

            if (value.Length >= 9) // Проверяем, что длина строки достаточна для форматирования
            {
                var formattedValue = $"+998({value.Substring(0, 2)}){value.Substring(2, 3)}-{value.Substring(5, 2)}-{value.Substring(7, 2)}";
                _newPerson.PhoneNumber = formattedValue;
            }
            else
            {
                // Обрабатываем случай, если длина недостаточна для форматирования
                _newPerson.PhoneNumber = value;
            }
        }
    }


    private void ToggleAddForm()
    {
        _isAdding = !_isAdding;
    }

    private async Task AddPerson()
    {
        var response = await Http.PostAsJsonAsync("/Persons", _newPerson);
        if (response.IsSuccessStatusCode)
        {
            if (_uploadedPhoto != null)
            {
                var person = await response.Content.ReadFromJsonAsync<PersonDto>();
                await AddPhotoToPerson(person.Id, _uploadedPhoto);
            }

            await LoadPersons();
        }
        
        Snackbar.Add("Petition registered successfully!", Severity.Success);

        ToggleAddForm();
    }
    
    

    private void HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        _uploadedPhoto = e.File;
    }

    private async Task AddPhotoToPerson(int personId, IBrowserFile file)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StreamContent(file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)), "file", file.Name);
        await Http.PostAsync($"/Photos/AddPhotoToPerson/{personId}", content);
    }

    private async Task DeletePerson(int id)
    {
        await Http.DeleteAsync($"/Persons?id={id}");
        await LoadPersons();
        Snackbar.Add("Petition deleted successfully!", Severity.Error);
    }

}

