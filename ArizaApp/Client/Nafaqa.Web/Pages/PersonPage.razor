@page "/persons"
@using Gender = Common.Gender
@inject HttpClient Http
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager


<h3>Persons</h3>

<!-- Button to add a new person -->
<button class="btn btn-primary" @onclick="ToggleAddForm">Add New Person</button>

@if (_isAdding)
{
    <div class="form-overlay">
        <div class="form-container">
            <h4>Add New Person</h4>
            <EditForm Model="_newPerson" OnValidSubmit="AddPerson">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label>Full Name:</label>
                    <InputText @bind-Value="_newPerson.FullName" class="form-control"/>
                </div>

                <div class="form-group">
                    <label>Gender:</label>
                    <InputSelect @bind-Value="_newPerson.Gender" class="form-control">
                        @foreach (var value in Enum.GetValues<Gender>())
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label>Passport Series:</label>
                    <InputText @bind-Value="_newPerson.PassportSeria"
                               class="text-uppercase form-control"
                               maxlength="2"
                               Placeholder="XX"
                               @oninput="(e) => _newPerson.PassportSeria = e.Value
                               .ToString().ToUpper()"/>
                </div>

                <div class="form-group">
                    <label>Passport Number:</label>
                    <InputNumber @bind-Value="_newPerson.PassportNumber"
                                 class="form-control"
                                 Placeholder="12345"/>
                </div>

                <div class="form-group">
                    <label>Address:</label>
                    <InputText @bind-Value="_newPerson.Address" class="form-control"/>
                </div>

                <div class="form-group">
                    <label for="PhoneNumberInput">Phone Number:</label>
                    <InputText id="PhoneNumberInput"
                               @bind-Value="_newPerson.PhoneNumber"
                               class="form-control"
                               maxlength="18"
                               placeholder="+998(##)-###-##-##"
                               @oninput="HandleInputChange"/>
                </div>

                <div class="form-group">
                    <label>Upload Photo:</label>
                    <InputFile OnChange="HandlePhotoUpload"/>
                </div>

                <div class="form-buttons">
                    <button type="submit" class="btn btn-success">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleAddForm">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_persons != null)
{
    <div class="table-container">
        <table class="table table-striped">
            <thead>
            <tr>
                <th>ID</th>
                <th>Full Name</th>
                <th>Phone Number</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var person in _persons)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.FullName</td>
                    <td>@person.PhoneNumber</td>
                    <MudTd>
                        <button class="btn @((_selectedPerson == person) ? "btn-secondary" : "btn-info")"
                                @onclick="() => LoadDetails(person)">
                            @((_selectedPerson == person) ? "Hide Details" : "View Details")
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeletePerson(person.Id)">Delete</button>
                        @* <button class="btn btn-danger" @onclick="() => DeletePetition(petition.Id)">Delete</button> *@
                    </MudTd>
                </tr>


                @if (_selectedPerson == person)
                {
                    <tr>
                        <td colspan="6">
                            <h4>Details</h4>
                            <p><strong>Photo:</strong></p>
                            @if (!string.IsNullOrEmpty(_personPhoto))
                            {
                                <img src="@_personPhoto" alt="Photo"
                                     style="width: 150px; height: 150px; object-fit: cover;"/>
                                <div class="btn-group">
                                    <tr>
                                        <button class="btn btn-danger material-icons" @onclick="() => DeletePhoto(person.Id, person)">
                                            delete
                                        </button>
                                        <button class="btn btn-success" @onclick="() => DeletePhoto(person.Id, person)">
                                            Insert photo
                                        </button>
                                    </tr>
                                </div>
                                @if (string.IsNullOrEmpty(_personPhoto))
                                {
                                    <p>Photo path is null or empty.</p>
                                }
                            }
                            else
                            {
                                <p>No Photo Available</p>
                            }

                            <div class="form-group d-flex">
                                <div class="flex-fill pr-3">
                                    <label>Address</label>
                                    <span class="form-control">@person.Address</span>
                                </div>
                                <div class="flex-fill pl-3">
                                    <label>Phone Number</label>
                                    <span class="form-control">@person.PhoneNumber</span>
                                </div>
                            </div>
                            <div class="form-group d-flex">
                                <div class="flex-fill pr-3">
                                    <label>Passport Series</label>
                                    <span class="form-control">@person.PassportSeria</span>
                                </div>
                                <div class="flex-fill px-3">
                                    <label>Passport Number</label>
                                    <span class="form-control">@person.PassportNumber</span>
                                </div>
                                <div class="flex-fill pl-3">
                                    <label>Gender</label>
                                    <span class="form-control">@person.Gender</span>
                                </div>
                            </div>

                            <h4>Petitions</h4>
                            <ul>
                                @*     Letter: @petition.Letter (Date: @petition.ApplicationDate.ToShortDateString()) *@
                                @if (_petitions != null && _petitions.Any())
                                {
                                    <div class="table-container">
                                        <table class="table table-striped">
                                            <thead>
                                            <tr>
                                                <th>Allowance</th>
                                                <th>Letter</th>
                                                <th>Application Date</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @foreach (var petition in _petitions)
                                            {
                                                <tr>
                                                    <td>@petition.Allowance</td>
                                                    <td>@petition.Letter</td>
                                                    <td>@petition.ApplicationDate.ToShortDateString()</td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <li>No Petitions Found</li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<PersonDto>? _persons;
    private List<PetitionDto>? _petitions;
    private PersonDto _newPerson = new();
    private bool _isAdding = false;
    private PersonDto? _selectedPerson;
    private IBrowserFile? _uploadedPhoto;
    private string? _personPhoto;

    protected override async Task OnInitializedAsync()
    {
        await LoadPersons();
    }

    private async Task LoadPersons()
    {
        _persons = await Http.GetFromJsonAsync<List<PersonDto>>("/Persons");
    }

    private async Task LoadDetails(PersonDto? person)
    {
        if (_selectedPerson == person)
        {
            _selectedPerson = null;
            _petitions = null;
            _personPhoto = null;
        }
        else
        {
            _selectedPerson = person;

            _petitions = await LoadPetitionsAsync(person.Id);

            _personPhoto = await GetPersonsPhotoAsync(person.Id);
            //PersonPhoto = string.IsNullOrEmpty(photoPath) ? null : $"{photoPath}";
        }
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (!string.IsNullOrEmpty(value))
        {
            // Remove all non-numeric characters
            value = new string(value.Where(char.IsDigit).ToArray());

            // Apply mask if value length is at least 10
            if (value.Length >= 1)
            {
                var formattedValue = $"+998({value.Substring(0, 2)}){value.Substring(2, 3)}-{value.Substring(5, 2)}-{value.Substring(7, 2)}";
                _newPerson.PhoneNumber = formattedValue;
            }
            else
            {
                _newPerson.PhoneNumber = value;
            }
        }
    }

    private async Task<List<PetitionDto>?> LoadPetitionsAsync(int personId)
    {
        return await Http.GetFromJsonAsync<List<PetitionDto>>($"/Petitions/GetPersonPetitions?personId={personId}");
    }

    private async Task<string?> GetPersonsPhotoAsync(int personId)
    {
        var imageBytes = await Http.GetByteArrayAsync($"/Photos/GetPersonPhoto?personId={personId}");
        var base64String = Convert.ToBase64String(imageBytes);
        return $"data:image/jpeg;base64,{base64String}";
    }

    private async Task DeletePerson(int id)
    {
        await Http.DeleteAsync($"Persons?id={id}");
        await LoadPersons();
    }

    private async Task DeletePhoto(int personId, PersonDto? person)
    {
        await Http.DeleteAsync($"/Photos/DeletePhotoFromPersonAsync?personId={personId}");
        await LoadDetails(person);
    }

    private void ToggleAddForm()
    {
        _isAdding = !_isAdding;
    }

    private void NavigateToPersonInfo(int id)
    {
        NavigationManager.NavigateTo($"/personinfo/{id}");
    }

    
    private async Task AddPerson()
    {
        var personResponse = await Http.PostAsJsonAsync("/Persons", _newPerson);
        if (personResponse.IsSuccessStatusCode)
        {
            var person = await personResponse.Content.ReadFromJsonAsync<PersonDto>();
            //Thread.Sleep(1000);
            if (_uploadedPhoto != null)
            {
                await AddPhotoToPerson(person.Id, _uploadedPhoto);
            }

            await LoadPersons();
        }

        ToggleAddForm();
        _newPerson = new();
    }

    private void HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        _uploadedPhoto = e.File;
    }

    private async Task AddPhotoToPerson(int personId, IBrowserFile? file)
    {
        if (file == null)
        {
            throw new ArgumentException("Invalid file.");
        }

        var content = new MultipartFormDataContent();

        content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);
        await Http.PostAsync($"/Photos/AddPhotoToPerson{personId}", content);
    }


}
