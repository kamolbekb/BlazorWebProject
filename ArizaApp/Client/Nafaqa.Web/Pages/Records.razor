@page "/petitions"
@using Common
@inject HttpClient Http

<h3>Petitions</h3>

<!-- Button to add a new petition -->
<button class="btn btn-primary" @onclick="ToggleAddForm">Add New Petition</button>

@if (_isAdding && !_isEditing)
{
    <div class="form-overlay">
        <div class="form-container">
            <h4>Add New Petition</h4>
            <EditForm Model="_newPetition" OnValidSubmit="AddPetition">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Allowance:</label>
                    <InputSelect @bind-Value="_newPetition.Allowance" class="form-control">
                        @foreach (var value in Enum.GetValues<AllowanceType>())
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label>Person ID:</label>
                    <InputNumber @bind-Value="_newPetition.PersonId" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Letter:</label>
                    <InputText @bind-Value="_newPetition.Letter" class="form-control" />
                </div>

                <div class="form-buttons">
                    <button type="submit" class="btn btn-success">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleAddForm">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_isEditing)
{
    <div class="form-overlay">
        <div class="form-container">
            <h4>Edit Petition</h4>
            <EditForm Model="_updatedPetition" OnValidSubmit="EditPetition">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Allowance:</label>
                    <InputSelect @bind-Value="_updatedPetition.Allowance" class="form-control">
                        @foreach (var value in Enum.GetValues<AllowanceType>())
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label>Person ID:</label>
                    <InputNumber @bind-Value="_updatedPetition.PersonId" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Letter:</label>
                    <InputText @bind-Value="_updatedPetition.Letter" class="form-control" />
                </div>

                <div class="form-buttons">
                    <button type="submit" class="btn btn-success">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_petitions != null)
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>ID</th>
            <th>Allowance</th>
            <th>Person ID</th>
            <th>Letter</th>
            <th>Application Date</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var petition in _petitions)
        {
            <tr>
                <td>@petition.Id</td>
                <td>@petition.Allowance</td>
                <td>@petition.PersonId</td>
                <td>@petition.Letter</td>
                <td>@petition.ApplicationDate.ToShortDateString()</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => StartEdit(petition)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeletePetition(petition.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<PetitionDto>? _petitions;
    private PetitionDto _newPetition = new();
    private PetitionDto _updatedPetition = new();
    private bool _isAdding = false;
    private bool _isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPetitions();
    }

    private async Task LoadPetitions()
    {
        _petitions = await Http.GetFromJsonAsync<List<PetitionDto>>("Petitions");
    }

    private void ToggleAddForm()
    {
        _isAdding = !_isAdding;
        _isEditing = false;
    }

    private async Task AddPetition()
    {
        await Http.PostAsJsonAsync("Petitions/api/petitions", _newPetition);
        await LoadPetitions();
        ToggleAddForm();
        _newPetition = new();
    }

    private void StartEdit(PetitionDto petition)
    {
        _updatedPetition = new PetitionDto
        {
            Id = petition.Id,
            Allowance = petition.Allowance,
            PersonId = petition.PersonId,
            Letter = petition.Letter,
            ApplicationDate = petition.ApplicationDate
        };
        _isEditing = true;
        _isAdding = false;
    }

    private async Task EditPetition()
    {
        await Http.PutAsJsonAsync($"Petitions?id={_updatedPetition.Id}", _updatedPetition);
        await LoadPetitions();
        CancelEdit();
    }

    private void CancelEdit()
    {
        _isEditing = false;
        _updatedPetition = new();
    }

    private async Task DeletePetition(int id)
    {
        await Http.DeleteAsync($"Petitions?id={id}");
        await LoadPetitions();
    }
}
