@typeparam TItem

<div>
    <table class="table table-bordered table-striped">
        <thead class="table-danger">
        @ChildContentHeader
        </thead>
        <tbody>
        @foreach (var item in PaginatedData)
        {
            @ChildContentRow(item)
        }
        </tbody>
    </table>

    <div class="pagination-controls">
        <label for="pageSize">Page Size: </label>
        <select @bind="PageSize" id="pageSize">
            @foreach (var size in PageSizes)
            {
                <option value="@size">@size</option>
            }
        </select>

        <button @onclick="PreviousPage" disabled="@IsPreviousDisabled">Previous</button>

        @foreach (var pageNumber in Enumerable.Range(1, TotalPages))
        {
            <button @onclick="() => GoToPage(pageNumber)" class="@(CurrentPage == pageNumber ? "active" : "")">
                @pageNumber
            </button>
        }

        <button @onclick="NextPage" disabled="@IsNextDisabled">Next</button>
    </div>

</div>
<style>
    .pagination-controls
    {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 20px;
    }

    .pagination-controls button {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        color: #007bff;
        padding: 5px 10px;
        margin: 0 5px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .pagination-controls button:hover {
        background-color: #007bff;
        color: white;
    }

    .pagination-controls button.active {
        background-color: #007bff;
        color: white;
        font-weight: bold;
    }

    .pagination-controls button:disabled {
        background-color: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
        border-color: #ced4da;
    }

    .pagination-controls select {
        margin-right: 15px;
        padding: 5px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .pagination-controls label {
        margin-right: 5px;
        font-weight: bold;
    }
</style>

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public int DefaultPageSize { get; set; } = 10;
    [Parameter] public RenderFragment ChildContentHeader { get; set; }
    [Parameter] public RenderFragment<TItem> ChildContentRow { get; set; }

    private int PageSize { get; set; }
    private List<TItem> PaginatedData => Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    private int CurrentPage { get; set; } = 1;

    private readonly int[] PageSizes = new[] { 5, 10, 20, 50 };

    protected override void OnInitialized()
    {
        PageSize = DefaultPageSize;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    private void GoToPage(int pageNumber)
    {
        CurrentPage = pageNumber;
    }

    private int TotalPages => (int)Math.Ceiling(Items.Count() / (double)PageSize);

    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => CurrentPage == TotalPages;
}
